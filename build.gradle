import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        // TODO To remove after final Spring Boot 2 release
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://dl.bintray.com/jhipster/maven" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "org.sonarqube" version "2.5"
    id "net.ltgt.apt-eclipse" version "0.13"
    id "net.ltgt.apt-idea" version "0.13"
    id "net.ltgt.apt" version "0.13"
    id "io.spring.dependency-management" version "1.0.3.RELEASE"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
// Until JHipster supports JDK 9
assert System.properties['java.specification.version'] == '1.8'

apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

dependencyManagement {
    dependencies {
        dependency 'com.mattbertolini:liquibase-slf4j:2.0.0'
        dependency 'commons-io:commons-io:2.6'
        dependency 'com.ryantenney.metrics:metrics-spring:3.1.3'
        dependency 'io.github.jhipster:jhipster:2.0.0-20171229.062627-3'
        dependency 'io.jsonwebtoken:jjwt:0.9.0'
        dependency 'io.springfox:springfox-bean-validators:2.8.0'
        dependency 'io.springfox:springfox-swagger2:2.8.0'
        dependency 'javax.xml.bind:jaxb-api:2.3.0'
        dependency 'net.logstash.logback:logstash-logback-encoder:4.11'
        dependency 'org.zalando:problem-spring-web:0.22.1'
    }
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.M5'
        //mavenBom 'io.github.jhipster:jhipster-dependencies:' + jhipster_dependencies_version
        //jhipster-needle-gradle-dependency-management - JHipster will add additional dependencies management here
    }
}

defaultTasks 'bootRun'

group = 'ch.admin.seco.service.tracking'
version = version != 'unspecified' ? version : '0.0.1-SNAPSHOT'


description = ''

bootJar {
    mainClassName = 'ch.admin.seco.service.tracking.TrackingApp'
}

springBoot {
    mainClassName = 'ch.admin.seco.service.tracking.TrackingApp'
    buildInfo()
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

apply from: 'gradle/docker.gradle'
apply from: 'gradle/sonar.gradle'
apply from: 'gradle/liquibase.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/maven-publish.gradle'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

if (project.hasProperty('zipkin')) {
    apply from: 'gradle/zipkin.gradle'
}

configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    jcenter()
    // TODO To remove after final Spring Boot 2 release
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://dl.bintray.com/jhipster/maven" }
}

dependencies {
    // TODO To remove after final Spring Boot 2 release
    compile "javax.xml.bind:jaxb-api"
    compile "io.github.jhipster:jhipster"
    compile "io.dropwizard.metrics:metrics-core"
    compile "io.dropwizard.metrics:metrics-json"
    compile "io.dropwizard.metrics:metrics-jvm"
    compile "io.dropwizard.metrics:metrics-servlet"
    compile "io.dropwizard.metrics:metrics-servlets"
    compile "net.logstash.logback:logstash-logback-encoder"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"
    compile "com.ryantenney.metrics:metrics-spring"
    compile "org.hibernate:hibernate-core"
    compile "com.zaxxer:HikariCP"
    compile "org.apache.commons:commons-lang3"
    compile "commons-io:commons-io"
    compile "javax.transaction:javax.transaction-api"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate.validator:hibernate-validator"
    compile "org.liquibase:liquibase-core"
    compile "com.mattbertolini:liquibase-slf4j"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.zalando:problem-spring-web"
    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    compile "org.springframework.retry:spring-retry"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    compile "org.springframework.cloud:spring-cloud-starter-config"
    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    compile "org.springframework.cloud:spring-cloud-spring-service-connector"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile "org.springframework.security:spring-security-web"
    compile "io.jsonwebtoken:jjwt"
    compile("io.springfox:springfox-swagger2") {
        exclude module: 'mapstruct'
    }
    compile "io.springfox:springfox-bean-validators"
    compile "org.postgresql:postgresql"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    testCompile "com.jayway.jsonpath:json-path"
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.mattbertolini:liquibase-slf4j"
    testCompile "org.hamcrest:hamcrest-library"
    optional("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

task stage(dependsOn: 'bootJar') {
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources

afterEvaluate {
    bootJar {
        manifest {
            attributes(
                (java.util.jar.Attributes.Name.IMPLEMENTATION_TITLE.toString()): project.name,
                (java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION.toString()): project.version,
                (java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR.toString()): 'mimacom ag',
                'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Built-By': System.getProperty('user.name'),
                'Built-On': "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}",
                'Spring-Version': org.springframework.core.SpringVersion.getVersion()
            )
        }
    }
}
